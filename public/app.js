!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var I=F[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,U),I.l=!0,I.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)U.d(B,I,function(F){return Q[F]}.bind(null,I));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="public",U(U.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/utilities/FormulaProvider.ts\nclass FormulaProvider {\r\n    static getAreaForShape(shape) {\r\n        switch (shape) {\r\n            case "Circle_Circle":\r\n                return "π &middot; r<sup>2</sup>";\r\n            case "EquilateralTriangle_EquilateralTriangle":\r\n                return "(a<sup>2</sup> &middot; &#8730;(3))/4";\r\n            case "Rectangle_Rectangle":\r\n                return "a &middot; b";\r\n            case "RegularPentagon_RegularPentagon":\r\n                return "(&#8730;(5 &middot (5 + 2 &middot (&#8730;(5)))) &middot a<sup>2</sup>) / 4";\r\n            case "Square_Square":\r\n                return "a<sup>2</sup>";\r\n            case "Triangle_Triangle":\r\n                return "(a &middot; h)/2";\r\n            default:\r\n                throw new Error("Not known shape");\r\n        }\r\n    }\r\n    static getPerimeterForShape(shape) {\r\n        switch (shape) {\r\n            case "Circle_Circle":\r\n                return "2 &middot; π &middot; r";\r\n            case "EquilateralTriangle_EquilateralTriangle":\r\n                return "3 &middot; a";\r\n            case "Rectangle_Rectangle":\r\n                return "2a + 2b";\r\n            case "RegularPentagon_RegularPentagon":\r\n                return "5 &middot; a";\r\n            case "Square_Square":\r\n                return "4 &middot; a";\r\n            case "Triangle_Triangle":\r\n                return "a + b + c";\r\n            default:\r\n                throw new Error("Not known shape");\r\n        }\r\n    }\r\n}\r\nFormulaProvider.SHAPES = [\r\n    "Circle_Circle",\r\n    "EquilateralTriangle_EquilateralTriangle",\r\n    "Rectangle_Rectangle",\r\n    "RegularPentagon_RegularPentagon",\r\n    "Square_Square",\r\n    "Triangle_Triangle"\r\n];\r\n\n// CONCATENATED MODULE: ./src/shapes/Shape.ts\n\r\nclass Shape_Shape {\r\n    asTableEntry(row) {\r\n        return `\r\n            <tr>\r\n            <th scope="row">${row}</th>\r\n            <td>${this.constructor.name}</td>\r\n            <td></td>\r\n            <td>${Math.round(this.calculatePerimeter())}</td>\r\n            <td>${FormulaProvider.getAreaForShape(this.constructor.name)}</td>\r\n            <td>${Math.round(this.calculateArea())}</td>\r\n            <td>${FormulaProvider.getPerimeterForShape(this.constructor.name)}</td>\r\n            </tr>\r\n            `;\r\n    }\r\n    static checkIfArgsGreaterThanZero(args) {\r\n        for (let a of args) {\r\n            if (a < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getArguments() {\r\n        throw new Error("method not implemented");\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/Circle.ts\n\r\n\r\nclass Circle_Circle extends Shape_Shape {\r\n    constructor(_r) {\r\n        super();\r\n        this._r = _r;\r\n    }\r\n    calculateArea() {\r\n        return Math.PI * this._r * this._r;\r\n    }\r\n    calculatePerimeter() {\r\n        return 2 * Math.PI * this._r;\r\n    }\r\n    get r() {\r\n        return this._r;\r\n    }\r\n    getArguments() {\r\n        return [this.r];\r\n    }\r\n    asTableEntry(row) {\r\n        return `\r\n            <tr>\r\n            <th scope="row">${row}</th>\r\n            <td>${this.constructor.name}</td>\r\n            <td></td>\r\n            <td>${Math.round(this.calculatePerimeter())}</td>\r\n            <td>${FormulaProvider.getAreaForShape(this.constructor.name)}</td>\r\n            <td>${Math.round(this.calculateArea())}</td>\r\n            <td>${FormulaProvider.getPerimeterForShape(this.constructor.name)}</td>\r\n            </tr>\r\n            `;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/Triangle.ts\n\r\nclass Triangle_Triangle extends Shape_Shape {\r\n    constructor(_a, _b, _c, _h) {\r\n        super();\r\n        this._a = _a;\r\n        this._b = _b;\r\n        this._c = _c;\r\n        this._h = _h;\r\n    }\r\n    calculateArea() {\r\n        return (this._a * this._h) / 2;\r\n    }\r\n    calculatePerimeter() {\r\n        return this._a + this._b + this._c;\r\n    }\r\n    get a() {\r\n        return this._a;\r\n    }\r\n    get b() {\r\n        return this._b;\r\n    }\r\n    get c() {\r\n        return this._c;\r\n    }\r\n    get h() {\r\n        return this._h;\r\n    }\r\n    getArguments() {\r\n        return [this._a, this._b, this._c, this._h];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/EquilateralTriangle.ts\n\r\nclass EquilateralTriangle_EquilateralTriangle extends Triangle_Triangle {\r\n    constructor(a) {\r\n        super(a, a, a, Math.round(Math.sqrt(3)) * a / 2);\r\n    }\r\n    getArguments() {\r\n        return [this._a, this._h];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/Rectangle.ts\n\r\nclass Rectangle_Rectangle extends Shape_Shape {\r\n    constructor(_a, _b) {\r\n        super();\r\n        this._a = _a;\r\n        this._b = _b;\r\n    }\r\n    calculateArea() {\r\n        return 2 * this._a + 2 * this._b;\r\n    }\r\n    calculatePerimeter() {\r\n        return this._a * this._b;\r\n    }\r\n    get a() {\r\n        return this._a;\r\n    }\r\n    get b() {\r\n        return this._b;\r\n    }\r\n    getArguments() {\r\n        return [this._a, this._b];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/RegularPentagon.ts\n\r\nclass RegularPentagon_RegularPentagon extends Shape_Shape {\r\n    constructor(_a) {\r\n        super();\r\n        this._a = _a;\r\n    }\r\n    calculateArea() {\r\n        return ((Math.sqrt(5 * (5 + 2 * (Math.sqrt(5)))) * this._a * this._a) / 4);\r\n    }\r\n    calculatePerimeter() {\r\n        return this._a * 5;\r\n    }\r\n    get a() {\r\n        return this._a;\r\n    }\r\n    getArguments() {\r\n        return [this._a];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shapes/Square.ts\n\r\nclass Square_Square extends Rectangle_Rectangle {\r\n    constructor(a) {\r\n        super(a, a);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/containers/ShapeCollection.ts\n\r\n\r\n\r\n\r\n\r\n\r\nclass ShapeCollection_ShapeCollection {\r\n    constructor() {\r\n        this.shapes = [];\r\n    }\r\n    add(shape) {\r\n        this.shapes.push(shape);\r\n        this.saveToLocalStorage();\r\n    }\r\n    getAll() {\r\n        return this.shapes;\r\n    }\r\n    saveToLocalStorage() {\r\n        let objectList = this.shapes.map(s => {\r\n            return { args: s.getArguments(), type: s.constructor.name };\r\n        });\r\n        localStorage.setItem("shapes", JSON.stringify(objectList));\r\n    }\r\n    loadFromLocalStorage() {\r\n        let shapesAsString = localStorage.getItem("shapes");\r\n        if (shapesAsString) {\r\n            this.shapes = JSON.parse(shapesAsString).map(createShape);\r\n        }\r\n        function createShape(data) {\r\n            if (data.type == \'Circle_Circle\') {\r\n                return new Circle_Circle(data.args[0]);\r\n            }\r\n            if (data.type == \'Rectangle_Rectangle\') {\r\n                return new Rectangle_Rectangle(data.args[0], data.args[1]);\r\n            }\r\n            if (data.type == \'Square_Square\') {\r\n                return new Square_Square(data.args[0]);\r\n            }\r\n            if (data.type == \'RegularPentagon_RegularPentagon\') {\r\n                return new RegularPentagon_RegularPentagon(data.args[0]);\r\n            }\r\n            if (data.type == \'Triangle_Triangle\') {\r\n                return new Triangle_Triangle(data.args[0], data.args[1], data.args[2], data.args[3]);\r\n            }\r\n            if (data.type == \'EquilateralTriangle_EquilateralTriangle\') {\r\n                return new EquilateralTriangle_EquilateralTriangle(data.args[0]);\r\n            }\r\n            throw ("Unsupported shape");\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/app.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(function () {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    const shapeCollection = new ShapeCollection_ShapeCollection();\r\n    const showShapes = document.querySelector(\'.show-shapes\');\r\n    showShapes === null || showShapes === void 0 ? void 0 : showShapes.addEventListener(\'click\', () => {\r\n        shapeCollection.loadFromLocalStorage();\r\n        refreshShapesInHtml();\r\n    });\r\n    const largestPerimeter = document.querySelector(\'.largest-perimeter\');\r\n    largestPerimeter === null || largestPerimeter === void 0 ? void 0 : largestPerimeter.addEventListener(\'click\', () => {\r\n        // TODO Show shape with the largest perimeter\r\n    });\r\n    const largestArea = document.querySelector(\'.largest-area\');\r\n    largestArea === null || largestArea === void 0 ? void 0 : largestArea.addEventListener(\'click\', () => {\r\n        // TODO Show shape with the largest area\r\n    });\r\n    const formulas = document.querySelector(\'.formulas\');\r\n    formulas === null || formulas === void 0 ? void 0 : formulas.addEventListener(\'click\', () => {\r\n        let tableBody = FormulaProvider.SHAPES.map(thisconstructorname => {\r\n            return `<tr>\r\n                    <td>${thisconstructorname}</td>\r\n                    <td>${FormulaProvider.getPerimeterForShape(thisconstructorname)}</td>\r\n                    <td>${FormulaProvider.getAreaForShape(thisconstructorname)}</td>\r\n                    </tr>`;\r\n        }).join("");\r\n        let el = document.querySelector("#formula-data");\r\n        el.innerHTML = tableBody;\r\n    });\r\n    (_a = document.querySelector(\'#add-circle\')) === null || _a === void 0 ? void 0 : _a.addEventListener(\'click\', () => {\r\n        let rElement = document.querySelector(\'#add-circle-r\');\r\n        let circle = new Circle_Circle(parseFloat(rElement.value));\r\n        shapeCollection.add(circle);\r\n        refreshShapesInHtml();\r\n    });\r\n    (_b = document.querySelector(\'#add-square\')) === null || _b === void 0 ? void 0 : _b.addEventListener(\'click\', () => {\r\n        let rElement = document.querySelector(\'#add-square-a\');\r\n        let square = new Square_Square(parseFloat(rElement.value));\r\n        shapeCollection.add(square);\r\n        refreshShapesInHtml();\r\n    });\r\n    (_c = document.querySelector("#add-pentagon")) === null || _c === void 0 ? void 0 : _c.addEventListener(\'click\', () => {\r\n        let rElement = document.querySelector(\'#add-pentagon-a\');\r\n        let pentagon = new RegularPentagon_RegularPentagon(parseFloat(rElement.value));\r\n        shapeCollection.add(pentagon);\r\n        refreshShapesInHtml();\r\n    });\r\n    (_d = document.querySelector("#add-eTriangle")) === null || _d === void 0 ? void 0 : _d.addEventListener(\'click\', () => {\r\n        let rElement = document.querySelector(\'#add-eTriangle-a\');\r\n        let eTriangle = new EquilateralTriangle_EquilateralTriangle(parseFloat(rElement.value));\r\n        shapeCollection.add(eTriangle);\r\n        refreshShapesInHtml();\r\n    });\r\n    (_e = document.querySelector("#add-rectangle")) === null || _e === void 0 ? void 0 : _e.addEventListener(\'click\', () => {\r\n        let rElement_a = document.querySelector(\'#add-rectangle-a\');\r\n        let rElement_b = document.querySelector(\'#add-rectangle-b\');\r\n        let rectangle = new Rectangle_Rectangle(parseFloat(rElement_a.value), parseInt(rElement_b.value));\r\n        shapeCollection.add(rectangle);\r\n        refreshShapesInHtml();\r\n    });\r\n    (_f = document.querySelector("#add-triangle")) === null || _f === void 0 ? void 0 : _f.addEventListener(\'click\', () => {\r\n        let rElement_a = document.querySelector(\'#add-triangle-a\');\r\n        let rElement_b = document.querySelector(\'#add-triangle-b\');\r\n        let rElement_c = document.querySelector(\'#add-triangle-c\');\r\n        let rElement_h = document.querySelector(\'#add-triangle-h\');\r\n        let triangle = new Triangle_Triangle(parseFloat(rElement_a.value), parseFloat(rElement_b.value), parseFloat(rElement_c.value), parseFloat(rElement_h.value));\r\n        shapeCollection.add(triangle);\r\n        refreshShapesInHtml();\r\n    });\r\n    function refreshShapesInHtml() {\r\n        let tableData = shapeCollection.getAll().map((s, index) => s.asTableEntry(index)).join("");\r\n        let tableBody = document.querySelector(\'#shape-data\');\r\n        tableBody.innerHTML = tableData;\r\n    }\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);